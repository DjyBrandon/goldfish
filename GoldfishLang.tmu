<TMU|<tuple|1.0.5|1.2.9.8>>

<style|<tuple|book|chinese|goldfish|literate|reduced-margins|python>>

<\body>
  <\hide-preamble>
    <assign|r7rs|<flag|R7RS|dark cyan>>

    <assign|srfi|<flag|SRFI|dark red>>

    <assign|font|math=Latin Modern Math,cjk=Noto CJK SC,CMU>

    <assign|typehint|<macro|body|<goldfish-lang|<arg|body>>>>
  </hide-preamble>

  <chapter|(liii lang)>

  <section|许可证>

  <\goldfish-chunk|goldfish/liii/lang.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <section|接口>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    (define-library (liii lang)

    (import (liii base) (liii string) (liii vector)

    \ \ \ \ \ \ \ \ (liii list) (liii hash-table) (liii bitwise))

    (export

    \ \ option none

    \ \ case-integer case-char case-string

    \ \ case-list case-vector case-hash-table

    \ \ box

    )

    (begin

    \;
  </scm-chunk>

  <section|测试>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (import (liii check)

    \ \ \ \ \ \ \ \ (liii lang)

    \ \ \ \ \ \ \ \ (liii cut))

    \;

    (check-set-mode! 'report-failed)

    \;
  </scm-chunk>

  <section|公共子函数>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%apply-one x xs r)

    \ \ (let1 result r

    \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </goldfish-chunk>

  <section|option>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class option ((value any?))

    \;
  </goldfish-chunk>

  <subsection|测试>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((opt1 (option 42))

    \ \ \ \ \ \ (opt2 (option '())))

    \;

    \ \ (check (opt1 :map (lambda (x) (+ x 1))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :map (lambda (x) (* x 2))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :get) =\<gtr\> 86)

    \ \ (check (opt2 :map (lambda (x) (+ x 1))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :map (lambda (x) (* x 2))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :empty?) =\<gtr\> #t)

    \;

    \ \ (check (opt1 :flat-map (lambda (x) (option (+ x 1)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :flat-map (lambda (x) (option (* x 2)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :get) =\<gtr\> 86)

    \ \ (check (opt2 :flat-map (lambda (x) (option (+ x 1)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :flat-map (lambda (x) (option (* x 2)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :empty?) =\<gtr\> #t)

    \;

    \ \ (check (opt1 :filter (lambda (x) (\<gtr\> x 40))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :filter (lambda (x) (\<less\> x 50))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :get) =\<gtr\> 42)

    \ \ (check (opt1 :filter (lambda (x) (\<gtr\> x 50))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :filter (lambda (x) (\<less\> x 60))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :empty?) =\<gtr\> #t)

    \ \ (check (opt2 :filter (lambda (x) (\<gtr\> x 40))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :filter (lambda (x) (\<less\> x 50))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :empty?) =\<gtr\> #t)

    \;

    \ \ (check (opt1 :defined?) =\<gtr\> #t)

    \ \ (check (opt1 :empty?) =\<gtr\> #f)

    \ \ (check (opt2 :defined?) =\<gtr\> #f)

    \ \ (check (opt2 :empty?) =\<gtr\> #t)

    \;

    \ \ (check (opt1 :get) =\<gtr\> 42)

    \ \ (check-catch 'value-error (opt2 :get))

    \;

    \ \ (check (opt1 :get-or-else 0) =\<gtr\> 42)

    \ \ (check (opt2 :get-or-else 0) =\<gtr\> 0)

    \;

    \ \ (check (opt1 :get-or-else (lambda () 0)) =\<gtr\> 42)

    \ \ (check (opt2 :get-or-else (lambda () 0)) =\<gtr\> 0)

    )

    \;
  </scm-chunk>

  <subsection|选择器>

  <paragraph|option%get>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%get)

    \ \ (if (null? value)

    \ \ \ \ \ \ (value-error "option is empty, cannot get value")

    \ \ \ \ \ \ value))

    \;
  </goldfish-chunk>

  <paragraph|option%get-or-else>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%get-or-else default)

    \ \ (if (null? value)

    \ \ \ \ \ \ (if (procedure? default) (default) default)

    \ \ \ \ \ \ value))

    \;
  </goldfish-chunk>

  <subsection|谓词>

  <paragraph|option%equals>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%equals that)

    \ \ (== value (that 'value)))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-true ((option "str") :equals (option "str")))

    \;
  </goldfish-chunk>

  <paragraph|option%defined?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%defined?) (not (null? value)))

    \ \ 
  </goldfish-chunk>

  <paragraph|option%empty?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%empty?) (null? value))

    \;
  </goldfish-chunk>

  <subsection|高阶函数>

  <paragraph|option%map>

  \;

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%map f . xs)

    \ \ (%apply-one f xs

    \ \ \ \ (if (null? value)

    \ \ \ \ \ \ \ \ (option '())

    \ \ \ \ \ \ \ \ (option (f value)))))

    \;
  </goldfish-chunk>

  <paragraph|option%flatmap>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%flat-map f . xs)

    \ \ (let1 r (if (null? value)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ (option '())

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ (f value))

    \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%filter pred . xs)

    \ \ \ \ (let1 r (if (or (null? value) (not (pred value)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (option '())

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (option value))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </goldfish-chunk>

  <subsection|结尾>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </goldfish-chunk>

  <paragraph|none><index|none>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    (define (none) (option '()))

    \;
  </scm-chunk>

  <section|case-integer>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-integer ((data integer?))

    \;
  </goldfish-chunk>

  <subsection|选择器>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%unbox) data)

    \;
  </goldfish-chunk>

  <subsection|谓词>

  <paragraph|case-integer%equals>

  该函数由define-case-class自动生成。

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-true ((box 42) :equals (box 42)))

    (check-false ((box 41) :equals (box 42)))

    \;
  </goldfish-chunk>

  <subsection|转换器>

  <paragraph|case-integer%to>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (typed-define (%to (n integer?))

    \ \ (if (\<less\> n data)

    \ \ \ \ \ \ (case-list (list))

    \ \ \ \ \ \ (case-list (iota (+ (- n data) 1) data))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (((box 1) :to 2) :collect) =\<gtr\> (list 1 2))

    (check (((box 1) :to 1) :collect) =\<gtr\> (list 1))

    (check (((box 2) :to 1) :collect) =\<gtr\> (list ))

    \;
  </goldfish-chunk>

  <paragraph|case-integer%until>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (typed-define (%until (n integer?))

    \ \ (if (\<less\>= n data)

    \ \ \ \ \ \ (case-list (list))

    \ \ \ \ \ \ (case-list (iota (+ (- n data)) data))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (((box 1) :until 3) :collect) =\<gtr\> (list 1 2))

    (check (((box 1) :until 2) :collect) =\<gtr\> (list 1))

    (check (((box 2) :until 2) :collect) =\<gtr\> (list ))

    \;
  </goldfish-chunk>

  <paragraph|case-integer%to-char>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-char)

    \ \ (case-char data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-catch 'value-error ((box #x110000) :to-char))

    \;
  </goldfish-chunk>

  <paragraph|case-integer%to-string>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-string)

    \ \ (number-\<gtr\>string data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((box 1) :to-string) =\<gtr\> "1")

    \;
  </goldfish-chunk>

  <subsection|结尾>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </goldfish-chunk>

  <section|case-char>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-char ((code-point integer?))

    \;
  </goldfish-chunk>

  <subsection|谓词>

  <paragraph|case-char%equals>

  该函数由<scm|define-case-class>自动生成。

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-true ((case-char #x30) :equals (case-char #x30)))

    (check-false ((case-char #x31) :equals (case-char #x30)))

    \;
  </goldfish-chunk>

  <paragraph|case-char%digit?>

  判断一个字符是否为数字。它支持所有 Unicode 标准中定义的数字字符，包括以下范围：

  <tabular|<tformat|<twith|table-hmode|min>|<twith|table-width|1par>|<cwith|1|-1|1|-1|cell-hyphen|t>|<table|<row|<\cell>
    数字名称
  </cell>|<\cell>
    范围
  </cell>|<\cell>
    示例字符
  </cell>>|<row|<\cell>
    <strong|ASCII 数字>
  </cell>|<\cell>
    <code*|U+0030><nbsp>-<nbsp><code*|U+0039>
  </cell>|<\cell>
    <code*|0-9>
  </cell>>|<row|<\cell>
    <strong|全角数字>
  </cell>|<\cell>
    <code*|U+FF10><nbsp>-<nbsp><code*|U+FF19>
  </cell>|<\cell>
    <code*|０-９>
  </cell>>|<row|<\cell>
    <strong|阿拉伯数字>
  </cell>|<\cell>
    <code*|U+0660><nbsp>-<nbsp><code*|U+0669>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|扩展阿拉伯数字>
  </cell>|<\cell>
    <code*|U+06F0><nbsp>-<nbsp><code*|U+06F9>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|印度数字>
  </cell>|<\cell>
    <code*|U+0966><nbsp>-<nbsp><code*|U+096F>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|孟加拉数字>
  </cell>|<\cell>
    <code*|U+09E6><nbsp>-<nbsp><code*|U+09EF>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|古尔穆奇数字>
  </cell>|<\cell>
    <code*|U+0A66><nbsp>-<nbsp><code*|U+0A6F>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|古吉拉特数字>
  </cell>|<\cell>
    <code*|U+0AE6><nbsp>-<nbsp><code*|U+0AEF>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|奥里亚数字>
  </cell>|<\cell>
    <code*|U+0B66><nbsp>-<nbsp><code*|U+0B6F>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|泰米尔数字>
  </cell>|<\cell>
    <code*|U+0BE6><nbsp>-<nbsp><code*|U+0BEF>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|泰卢固数字>
  </cell>|<\cell>
    <code*|U+0C66><nbsp>-<nbsp><code*|U+0C6F>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|卡纳达数字>
  </cell>|<\cell>
    <code*|U+0CE6><nbsp>-<nbsp><code*|U+0CEF>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|马拉雅拉姆数字>
  </cell>|<\cell>
    <code*|U+0D66><nbsp>-<nbsp><code*|U+0D6F>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|泰文数字>
  </cell>|<\cell>
    <code*|U+0E50><nbsp>-<nbsp><code*|U+0E59>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|老挝数字>
  </cell>|<\cell>
    <code*|U+0ED0><nbsp>-<nbsp><code*|U+0ED9>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|藏文数字>
  </cell>|<\cell>
    <code*|U+0F20><nbsp>-<nbsp><code*|U+0F29>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|缅甸数字>
  </cell>|<\cell>
    <code*|U+1040><nbsp>-<nbsp><code*|U+1049>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|高棉数字>
  </cell>|<\cell>
    <code*|U+17E0><nbsp>-<nbsp><code*|U+17E9>
  </cell>|<\cell>
    \;
  </cell>>|<row|<\cell>
    <strong|蒙古数字>
  </cell>|<\cell>
    <code*|U+1810><nbsp>-<nbsp><code*|U+1819>
  </cell>|<\cell>
    \;
  </cell>>>>>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%digit?)

    \ \ (or

    \ \ \ (and (\<gtr\>= code-point 48) (\<less\>= code-point 57))

    \ \ \ (and (\<gtr\>= code-point #xFF10) (\<less\>= code-point #xFF19))

    \ \ \ (and (\<gtr\>= code-point #x0660) (\<less\>= code-point #x0669))

    \ \ \ (and (\<gtr\>= code-point #x06F0) (\<less\>= code-point #x06F9))

    \ \ \ (and (\<gtr\>= code-point #x0966) (\<less\>= code-point #x096F))

    \ \ \ (and (\<gtr\>= code-point #x09E6) (\<less\>= code-point #x09EF))

    \ \ \ (and (\<gtr\>= code-point #x0A66) (\<less\>= code-point #x0A6F))

    \ \ \ (and (\<gtr\>= code-point #x0AE6) (\<less\>= code-point #x0AEF))

    \ \ \ (and (\<gtr\>= code-point #x0B66) (\<less\>= code-point #x0B6F))

    \ \ \ (and (\<gtr\>= code-point #x0BE6) (\<less\>= code-point #x0BEF))

    \ \ \ (and (\<gtr\>= code-point #x0C66) (\<less\>= code-point #x0C6F))

    \ \ \ (and (\<gtr\>= code-point #x0CE6) (\<less\>= code-point #x0CEF))

    \ \ \ (and (\<gtr\>= code-point #x0D66) (\<less\>= code-point #x0D6F))

    \ \ \ (and (\<gtr\>= code-point #x0E50) (\<less\>= code-point #x0E59))

    \ \ \ (and (\<gtr\>= code-point #x0ED0) (\<less\>= code-point #x0ED9))

    \ \ \ (and (\<gtr\>= code-point #x0F20) (\<less\>= code-point #x0F29))

    \ \ \ (and (\<gtr\>= code-point #x1040) (\<less\>= code-point #x1049))

    \ \ \ (and (\<gtr\>= code-point #x17E0) (\<less\>= code-point #x17E9))

    \ \ \ (and (\<gtr\>= code-point #x1810) (\<less\>= code-point #x1819))))

    \ \ 
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((char1 (case-char 48)) \ ;; ASCII '0'

    \ \ \ \ \ \ (char2 (case-char #xFF10)) \ ;; 全角 '０'

    \ \ \ \ \ \ (char3 (case-char #x0660)) \ ;; 阿拉伯数字 '٠'

    \ \ \ \ \ \ (char4 (case-char #x06F0)) \ ;; 扩展阿拉伯数字 '۰'

    \ \ \ \ \ \ (char5 (case-char #x0966)) \ ;; 印度数字

    \ \ \ \ \ \ (char6 (case-char #x09E6)) \ ;; 孟加拉数字

    \ \ \ \ \ \ (char7 (case-char #x0A66)) \ ;; 古尔穆奇数字

    \ \ \ \ \ \ (char8 (case-char #x0AE6)) \ ;; 古吉拉特数字

    \ \ \ \ \ \ (char9 (case-char #x0B66)) \ ;; 奥里亚数字

    \ \ \ \ \ \ (char10 (case-char #x0BE6)) \ ;; 泰米尔数字

    \ \ \ \ \ \ (char11 (case-char #x0C66)) \ ;; 泰卢固数字

    \ \ \ \ \ \ (char12 (case-char #x0CE6)) \ ;; 卡纳达数字\ 

    \ \ \ \ \ \ (char13 (case-char #x0D66)) \ ;; 马拉雅拉姆数字

    \ \ \ \ \ \ (char14 (case-char #x0E50)) \ ;; 泰文数字 '๐'

    \ \ \ \ \ \ (char15 (case-char #x0ED0)) \ ;; 老挝数字

    \ \ \ \ \ \ (char16 (case-char #x0F20)) \ ;; 藏文数字

    \ \ \ \ \ \ (char17 (case-char #x1040)) \ ;; 缅甸数字 '၀'

    \ \ \ \ \ \ (char18 (case-char #x17E0)) \ ;; 高棉数字 '០'

    \ \ \ \ \ \ (char19 (case-char #x1810)) \ ;; 蒙古数字 '᠐'

    \ \ \ \ \ \ (char20 (case-char 65))) \ ;; ASCII 'A'

    \;

    \ \ ;; 测试 %digit?

    \ \ (check (char1 :digit?) =\<gtr\> #t) \ ;; ASCII 数字

    \ \ (check (char2 :digit?) =\<gtr\> #t) \ ;; 全角数字

    \ \ (check (char3 :digit?) =\<gtr\> #t) \ ;; 阿拉伯数字

    \ \ (check (char4 :digit?) =\<gtr\> #t) \ ;; 扩展阿拉伯数字

    \ \ (check (char5 :digit?) =\<gtr\> #t) \ ;; 印度数字

    \ \ (check (char6 :digit?) =\<gtr\> #t) \ ;; 孟加拉数字

    \ \ (check (char7 :digit?) =\<gtr\> #t) \ ;; 古尔穆奇数字

    \ \ (check (char8 :digit?) =\<gtr\> #t) \ ;; 古吉拉特数字

    \ \ (check (char9 :digit?) =\<gtr\> #t) \ ;; 奥里亚数字

    \ \ (check (char10 :digit?) =\<gtr\> #t) \ ;; 泰米尔数字

    \ \ (check (char11 :digit?) =\<gtr\> #t) \ ;; 泰卢固数字

    \ \ (check (char12 :digit?) =\<gtr\> #t) \ ;; 卡纳达数字

    \ \ (check (char13 :digit?) =\<gtr\> #t) \ ;; 马拉雅拉姆数字

    \ \ (check (char14 :digit?) =\<gtr\> #t) \ ;; 泰文数字

    \ \ (check (char15 :digit?) =\<gtr\> #t) \ ;; 老挝数字

    \ \ (check (char16 :digit?) =\<gtr\> #t) \ ;; 藏文数字

    \ \ (check (char17 :digit?) =\<gtr\> #t) \ ;; 缅甸数字

    \ \ (check (char18 :digit?) =\<gtr\> #t) \ ;; 高棉数字

    \ \ (check (char19 :digit?) =\<gtr\> #t) \ ;; 蒙古数字

    \ \ (check (char20 :digit?) =\<gtr\> #f)) \ ;; 非数字字符

    \;
  </goldfish-chunk>

  <subsection|转换>

  <paragraph|case-char%to-bytevector>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-bytevector)

    \ \ (cond

    \ \ \ \ ((\<less\>= code-point #x7F)

    \ \ \ \ \ (bytevector code-point))

    \;

    \ \ \ \ ((\<less\>= code-point #x7FF)

    \ \ \ \ \ (let ((byte1 (bitwise-ior #b11000000 (bitwise-and (arithmetic-shift code-point -6) #b00011111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte2 (bitwise-ior #b10000000 (bitwise-and code-point #b00111111))))

    \ \ \ \ \ \ \ (bytevector byte1 byte2)))

    \;

    \ \ \ \ ((\<less\>= code-point #xFFFF)

    \ \ \ \ \ (let ((byte1 (bitwise-ior #b11100000 (bitwise-and (arithmetic-shift code-point -12) #b00001111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte2 (bitwise-ior #b10000000 (bitwise-and (arithmetic-shift code-point -6) #b00111111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte3 (bitwise-ior #b10000000 (bitwise-and code-point #b00111111))))

    \ \ \ \ \ \ \ (bytevector byte1 byte2 byte3)))

    \;

    \ \ \ \ ((\<less\>= code-point #x10FFFF)

    \ \ \ \ \ (let ((byte1 (bitwise-ior #b11110000 (bitwise-and (arithmetic-shift code-point -18) #b00000111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte2 (bitwise-ior #b10000000 (bitwise-and (arithmetic-shift code-point -12) #b00111111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte3 (bitwise-ior #b10000000 (bitwise-and (arithmetic-shift code-point -6) #b00111111)))

    \ \ \ \ \ \ \ \ \ \ \ (byte4 (bitwise-ior #b10000000 (bitwise-and code-point #b00111111))))

    \ \ \ \ \ \ \ (bytevector byte1 byte2 byte3 byte4)))

    \;

    \ \ \ \ (else

    \ \ \ \ \ (value-error "Invalid code point"))))

    \;
  </goldfish-chunk>

  <paragraph|case-char%to-string>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-string)

    \ \ (utf8-\<gtr\>string (%to-bytevector)))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((case-char #x41) :to-string) =\<gtr\> "A")

    (check-true ((box #\\A) :equals (case-char #x41)))

    \;

    (check ((case-char #xA3) :to-string) =\<gtr\> "£")

    \;

    (check ((case-char #x4E2D) :to-string) =\<gtr\> "<code|中>")

    (check (object-\<gtr\>string (case-char #x4E2D)) =\<gtr\> "中")

    \;

    (check ((case-char #x1F600) :to-string) =\<gtr\> "<code|😀>")

    \;
  </goldfish-chunk>

  <subsection|结尾>

  \;

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </goldfish-chunk>

  由于默认的构造器无法处理非法输入，这里重新定义一下构造器。

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define make-case-char case-char)

    \;

    (typed-define (case-char (code integer?))

    \ \ (if (and (\<gtr\>= code 0) (\<less\>= code #x10FFFF))

    \ \ \ \ \ \ (make-case-char code)

    \ \ \ \ \ \ (value-error "case-char: code point out of range" code)))

    \;
  </goldfish-chunk>

  <section|case-string>

  Unicode编码的字符串。

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-string ((data string?))

    \;
  </scm-chunk>

  <subsection|选择器>

  <paragraph|case-string%unbox>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%unbox) data)

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((box "abc") :unbox) =\<gtr\> "abc")

    (check ((box "") :unbox) =\<gtr\> "")

    \;
  </goldfish-chunk>

  <paragraph|case-string%length>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    (define (%length)

    \ \ (u8-string-length data))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((case-string "abc") :length) =\<gtr\> 3)

    (check ((case-string "中文") :length) =\<gtr\> 2)

    \;
  </scm-chunk>

  <subsection|谓词>

  <paragraph|case-string%equals>

  该函数由<scm|define-case-class>自动生成。

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (box "42") =\<gtr\> (box "42"))

    (check-false ((box "41") :equals (box "42")))

    \;
  </goldfish-chunk>

  <paragraph|case-string%empty?><typehint|=\<gtr\> boolean?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%empty?)

    \ \ (string-null? data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-true ((case-string "") :empty?))

    (check-false ((case-string "abc") :empty?))

    \;
  </goldfish-chunk>

  <paragraph|case-string%starts-with>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%starts-with prefix)

    \ \ (string-starts? data prefix))

    \;
  </goldfish-chunk>

  <paragraph|case-string%ends-with>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%ends-with suffix)

    \ \ (string-ends? data suffix))

    \;
  </goldfish-chunk>

  <paragraph|case-string%forall>

  检查字符串中的所有字符是否都满足给定的谓词。

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%forall pred)

    \ \ (string-every pred data))

    \;
  </goldfish-chunk>

  <paragraph|case-string%exists>

  检查字符串中是否存在至少一个字符满足给定的谓词。

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%exists pred)

    \ \ (string-any pred data))

    \;
  </goldfish-chunk>

  <paragraph|case-string%contains>

  检查字符串中是否包含指定的字符或者子字符串。

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%contains elem)

    \ \ (cond ((string? elem)

    \ \ \ \ \ \ \ \ \ (string-contains data elem))

    \ \ \ \ \ \ \ \ ((char? elem)

    \ \ \ \ \ \ \ \ \ (string-contains data (string elem)))

    \ \ \ \ \ \ \ \ (else (type-error "elem must be char or string"))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 str (case-string "Hello, World!")

    \ \ (check-true (str :contains #\\W))

    \ \ (check-true (str :contains "Hello"))

    \ \ (check-true (str :contains "")))

    \;
  </goldfish-chunk>

  <subsection|高阶函数>

  <paragraph|case-string%map><typehint|((p procedure?)) =\<gtr\> case-string?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%map x . xs)

    \ \ (%apply-one x xs

    \ \ \ \ (case-string (string-map x data))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((case-string "abc") :map char-upcase :unbox) =\<gtr\> "ABC")

    \;
  </goldfish-chunk>

  <paragraph|case-string%count>

  计算字符串中满足给定谓词的字符的数量

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%count pred?)

    \ \ (string-count data pred?))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 str (case-string "Hello, World!")

    \ \ (check (str :forall char-alphabetic?) =\<gtr\> #f)

    \ \ (check (str :exists char-alphabetic?) =\<gtr\> #t)

    \ \ (check (str :count char-alphabetic?) =\<gtr\> 10)

    )

    \;
  </goldfish-chunk>

  <subsection|转换器>

  <paragraph|case-string%to-string>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-string)

    \ \ data)

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((case-string "hello") :to-string) =\<gtr\> "hello")

    \;
  </goldfish-chunk>

  <subsection|结尾>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </scm-chunk>

  <section|case-list>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-list ((data list?))

    \;
  </goldfish-chunk>

  <subsection|选择器>

  <paragraph|case-list%collect>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%collect) data)

    \;
  </goldfish-chunk>

  <paragraph|case-list%apply>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%apply n)

    \ \ (list-ref data n))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((box '(1 2 3)) :apply 0) =\<gtr\> 1)

    (check ((box '(1 2 3)) 0) =\<gtr\> 1)

    \;
  </goldfish-chunk>

  <paragraph|case-list%find><typehint|((pred procedure?)) =\<gtr\> option?>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    (define (%find pred)

    \ \ (let loop ((lst data))

    \ \ \ \ (cond

    \ \ \ \ \ \ ((null? lst) (none))

    \ \ \ \ \ \ ((pred (car lst)) (option (car lst)))

    \ \ \ \ \ \ (else (loop (cdr lst))))))

    \;
  </scm-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 lst (case-list '(1 2 3 4 5))

    \ \ (check ((lst :find (lambda (x) (= x 3))) :get) =\<gtr\> 3)

    \ \ (check ((lst :find (lambda (x) (\<gtr\> x 2))) :get) =\<gtr\> 3)

    \;

    \ \ (check ((lst :find (lambda (x) (\<gtr\> x 10))) :empty?) =\<gtr\> #t)

    \;

    \ \ (check ((lst :find even?) :get) =\<gtr\> 2)

    \;

    \ \ (check ((lst :find (lambda (x) (\<less\> x 0))) :empty?) =\<gtr\> #t)

    )

    \;
  </goldfish-chunk>

  <subsection|谓词>

  <paragraph|case-list%equals>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%equals that)

    \ \ (let* ((l1 data)

    \ \ \ \ \ \ \ \ \ (l2 (that 'data))

    \ \ \ \ \ \ \ \ \ (len1 (length l1))

    \ \ \ \ \ \ \ \ \ (len2 (length l2)))

    \ \ \ \ (if (not (eq? len1 len2))

    \ \ \ \ \ \ \ \ #f

    \ \ \ \ \ \ \ \ (let loop ((left l1) (right l2))

    \ \ \ \ \ \ \ \ \ \ (cond ((null? left) #t)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((!= (car left) (car right)) #f)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (else (loop (cdr left) (cdr right))))))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (box (list (box 1) (box 2) (box 3)))

    \ \ =\<gtr\> (((box 1) :to 3) :map box))

    \;
  </goldfish-chunk>

  <paragraph|case-list%forall>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%forall pred)

    \ \ (every pred data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 lst (box '(1 2 3 4 5))

    \ \ (check (lst :forall (lambda (x) (\<gtr\> x 0))) =\<gtr\> #t)

    \ \ (check (lst :forall (lambda (x) (\<gtr\> x 3))) =\<gtr\> #f)

    )

    \;

    (let1 empty-lst (case-list '())

    \ \ (check (empty-lst :forall (lambda (x) (\<gtr\> x 0))) =\<gtr\> #t))

    \;
  </goldfish-chunk>

  <paragraph|case-list%exists>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%exists pred)

    \ \ (any pred data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 l (case-list '(1 2 3))

    \ \ (check-true (l :exists even?)))

    \;
  </goldfish-chunk>

  <paragraph|case-list%contains><typehint|(elem) =\<gtr\> boolean?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%contains elem)

    \ \ (%exists (lambda (x) (equal? x elem))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 l (case-list '(1 2 3))

    \ \ (check-true (l :contains 1))

    \ \ (check-false (l :contains 4)))

    \;
  </goldfish-chunk>

  <subsection|高阶函数>

  \;

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%map x . xs)

    \ \ \ \ (let1 r (case-list (map x data))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \ \ 

    \ \ (define (%flat-map x . xs)

    \ \ \ \ (let1 r (case-list (flat-map x data))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \ \ 

    \ \ (define (%filter x . xs)

    \ \ \ \ (let1 r (case-list (filter x data))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;

    \ \ (define (%for-each x)

    \ \ \ \ (for-each x data))

    \;
  </scm-chunk>

  <paragraph|case-list%take>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%take x . xs)

    \ \ \ \ (typed-define (scala-take (data list?) (n integer?))

    \ \ \ \ \ \ (cond ((\<less\> n 0) '())

    \ \ \ \ \ \ \ \ \ \ \ \ ((\<gtr\>= n (length data)) data)

    \ \ \ \ \ \ \ \ \ \ \ \ (else (take data n))))

    \;

    \ \ \ \ (let1 r (case-list (scala-take data x))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((lst (case-list '(1 2 3 4 5))))

    \ \ (check (lst :take -1 :collect) =\<gtr\> '())

    \ \ (check (lst :take 0 :collect) =\<gtr\> '())

    \ \ (check (lst :take 3 :collect) =\<gtr\> '(1 2 3))

    \ \ (check (lst :take 5 :collect) =\<gtr\> '(1 2 3 4 5))

    \ \ (check (lst :take 10 :collect) =\<gtr\> '(1 2 3 4 5))

    )

    \;
  </scm-chunk>

  <paragraph|case-list%take-right>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%take-right x . xs)

    \ \ \ \ (typed-define (scala-take-right (data list?) (n integer?))

    \ \ \ \ \ \ (cond ((\<less\> n 0) '())

    \ \ \ \ \ \ \ \ \ \ \ \ ((\<gtr\>= n (length data)) data)

    \ \ \ \ \ \ \ \ \ \ \ \ (else (take-right data n))))

    \;

    \ \ \ \ (let1 r (case-list (scala-take-right data x))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((lst (case-list '(1 2 3 4 5))))

    \ \ (check (lst :take-right -1 :collect) =\<gtr\> '())

    \ \ (check (lst :take-right 0 :collect) =\<gtr\> '())

    \ \ (check (lst :take-right 3 :collect) =\<gtr\> '(3 4 5))

    \ \ (check (lst :take-right 5 :collect) =\<gtr\> '(1 2 3 4 5))

    \ \ (check (lst :take-right 10 :collect) =\<gtr\> '(1 2 3 4 5))

    )

    \;
  </scm-chunk>

  <paragraph|case-list%count>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%count . xs)

    \ \ \ \ (cond ((null? xs) (length data))

    \ \ \ \ \ \ \ \ \ \ ((length=? 1 xs) (count (car xs) data))

    \ \ \ \ \ \ \ \ \ \ (else (error 'wrong-number-of-args "case-list%count" xs))))

    \;
  </goldfish-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((case-list (list 1 2 3)) :count) =\<gtr\> 3)

    (check ((case-list (list 1 2 3)) :count (cut \<gtr\> \<less\>\<gtr\> 1)) =\<gtr\> 2)

    \;
  </scm-chunk>

  \;

  <subparagraph|fold>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%fold initial f)

    \ \ \ \ (fold f initial data))

    \;

    \ \ (define (%fold-right initial f)

    \ \ \ \ (fold-right f initial data))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((lst (case-list '(1 2 3 4 5))))

    \ \ (check (lst :fold 0 +) =\<gtr\> 15)

    \ \ (check (lst :fold '() (lambda (x acc) (cons x acc))) =\<gtr\> '(5 4 3 2 1))

    \;

    \ \ (check (lst :fold-right 0 +) =\<gtr\> 15)

    \ \ (check (lst :fold-right '() (lambda (x acc) (cons x acc))) =\<gtr\> '(1 2 3 4 5))

    )

    \;
  </scm-chunk>

  <subsection|转换器>

  <paragraph|case-list%to-string>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-string)

    \ \ (object-\<gtr\>string data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (object-\<gtr\>string (box '(1 2 3))) =\<gtr\> "(1 2 3)")

    \;
  </goldfish-chunk>

  <subparagraph|case-list%make-string>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%make-string . xs)

    \ \ \ \ (define (parse-args xs)

    \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ ((null? xs) (values "" "" ""))

    \ \ \ \ \ \ \ \ ((length=? 1 xs)

    \ \ \ \ \ \ \ \ \ (let1 sep (car xs)

    \ \ \ \ \ \ \ \ \ \ \ (if (string? sep)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (values "" sep "")

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (type-error "case-list%make-string: separator must be a string" sep))))

    \ \ \ \ \ \ \ \ ((length=? 2 xs)

    \ \ \ \ \ \ \ \ \ (error 'wrong-number-of-args "case-list%make-string: expected 0, 1, or 3 arguments, but got 2" xs))

    \ \ \ \ \ \ \ \ ((length=? 3 xs)

    \ \ \ \ \ \ \ \ \ (let ((start (car xs))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (sep (cadr xs))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (end (caddr xs)))

    \ \ \ \ \ \ \ \ \ \ \ (if (and (string? start) (string? sep) (string? end))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (values start sep end)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (error 'type-error "case-list%make-string: prefix, separator, and suffix must be strings" xs))))

    \ \ \ \ \ \ \ \ (else (error 'wrong-number-of-args "case-list%make-string: expected 0, 1, or 3 arguments" xs))))

    \;

    \ \ \ \ (receive (start sep end) (parse-args xs)

    \ \ \ \ \ \ (string-append start (string-join (map object-\<gtr\>string data) sep) end)))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 l (case-list (list 1 2 3))

    \ \ (check (l :make-string) =\<gtr\> "123")

    \ \ (check (l :make-string " ") =\<gtr\> "1 2 3")

    \ \ (check (l :make-string "[" "," "]") =\<gtr\> "[1,2,3]")

    \ \ 

    \ \ (check-catch 'wrong-number-of-args (l :make-string "[" ","))

    \ \ (check-catch 'type-error (l :make-string 123 "," "]"))

    \ \ (check-catch 'type-error (l :make-string "[" 123 "]"))

    \ \ (check-catch 'type-error (l :make-string "[" "," 123))

    )

    \;
  </scm-chunk>

  <subsection|结尾>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </scm-chunk>

  <section|case-vector>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-vector ((data vector?))

    \;
  </goldfish-chunk>

  <subsection|选择器>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%collect) data)

    \;
  </goldfish-chunk>

  <paragraph|case-vector%apply>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%apply n)

    \ \ (vector-ref data n))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check ((box #(1 2 3)) :apply 1) =\<gtr\> 2)

    (check ((box #(1 2 3)) 1) =\<gtr\> 2)

    \;
  </goldfish-chunk>

  <paragraph|case-vector%find>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%find p)

    \ \ \ \ (let loop ((i 0))

    \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ ((\<gtr\>= i (vector-length data)) (none))

    \ \ \ \ \ \ \ \ ((p (vector-ref data i)) (option (vector-ref data i)))

    \ \ \ \ \ \ \ \ (else (loop (+ i 1))))))
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((vec (case-vector #(1 2 3 4 5))))

    \ \ (check ((vec :find (lambda (x) (= x 3))) :get) =\<gtr\> 3)

    \ \ (check ((vec :find (lambda (x) (\<gtr\> x 2))) :get) =\<gtr\> 3)

    \;

    \ \ (check ((vec :find (lambda (x) (\<gtr\> x 10))) :empty?) =\<gtr\> #t)

    \;

    \ \ (check ((vec :find even?) :get) =\<gtr\> 2)

    \;

    \ \ (check ((vec :find (lambda (x) (\<less\> x 0))) :empty?) =\<gtr\> #t)

    )

    \;
  </scm-chunk>

  <subsection|谓词>

  <paragraph|case-vector%equals>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%equals that)

    \ \ (vector= == data (that 'data)))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check-true ((box #(1 2 3)) :equals (box #(1 2 3))))

    \;
  </goldfish-chunk>

  <paragraph|case-vector%forall>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%forall p)

    \ \ \ \ (vector-every p data))

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((vec (case-vector #(1 2 3 4 5))))

    \ \ (check (vec :forall (lambda (x) (\<gtr\> x 0))) =\<gtr\> #t)

    \ \ (check (vec :forall (lambda (x) (\<gtr\> x 3))) =\<gtr\> #f))

    \;

    (let ((empty-vec (case-vector #())))

    \ \ (check (empty-vec :forall (lambda (x) (\<gtr\> x 0))) =\<gtr\> #t))

    \;
  </scm-chunk>

  <subsection|高阶函数>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%map x . xs)

    \ \ \ \ (let1 r (case-vector (vector-map x data))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \ \ 

    \ \ (define (%filter x . xs)

    \ \ \ \ (let1 r (case-vector (vector-filter x data))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;

    \ \ (define (%for-each x)

    \ \ \ \ (vector-for-each x data))

    \;

    \ \ (define (%count . xs)

    \ \ \ \ (cond ((null? xs) (vector-length data))

    \ \ \ \ \ \ \ \ \ \ ((length=? 1 xs) (vector-count (car xs) data))

    \ \ \ \ \ \ \ \ \ \ (else (error 'wrong-number-of-args "case-vector%count" xs))))

    \;
  </scm-chunk>

  <paragraph|case-vector%take>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%take x . xs)

    \ \ \ \ (typed-define (scala-take (data vector?) (n integer?))

    \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ ((\<less\> n 0) (vector))

    \ \ \ \ \ \ \ \ ((\<gtr\>= n (vector-length data)) data)

    \ \ \ \ \ \ \ \ (else

    \ \ \ \ \ \ \ \ \ \ (let ((new-vec (make-vector n)))

    \ \ \ \ \ \ \ \ \ \ \ \ (do ((i 0 (+ i 1)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((\<gtr\>= i n) new-vec)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ (vector-set! new-vec i (vector-ref data i)))))))

    \;

    \ \ \ \ (let1 r (case-vector (scala-take data x))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </scm-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((vec (case-vector #(1 2 3 4 5))))

    \ \ (check (vec :take -1 :collect) =\<gtr\> #())

    \ \ (check (vec :take 0 :collect) =\<gtr\> #())

    \ \ (check (vec :take 3 :collect) =\<gtr\> #(1 2 3))

    \ \ (check (vec :take 5 :collect) =\<gtr\> #(1 2 3 4 5))

    \ \ (check (vec :take 10 :collect) =\<gtr\> #(1 2 3 4 5))

    )

    \;
  </goldfish-chunk>

  <paragraph|case-vector%take-right>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%take-right x . xs)

    \ \ \ \ (typed-define (scala-take-right (data vector?) (n integer?))

    \ \ \ \ \ \ (let ((len (vector-length data)))

    \ \ \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ \ \ ((\<less\> n 0) (vector))

    \ \ \ \ \ \ \ \ \ \ ((\<gtr\>= n len) data)

    \ \ \ \ \ \ \ \ \ \ (else

    \ \ \ \ \ \ \ \ \ \ \ \ (let ((new-vec (make-vector n)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ (do ((i (- len n) (+ i 1))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (j 0 (+ j 1)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((\<gtr\>= j n) new-vec)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (vector-set! new-vec j (vector-ref data i))))))))

    \;

    \ \ \ \ (let1 r (case-vector (scala-take-right data x))

    \ \ \ \ \ \ (if (null? xs) r (apply r xs))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((vec (case-vector #(1 2 3 4 5))))

    \ \ (check (vec :take-right -1 :collect) =\<gtr\> #())

    \ \ (check (vec :take-right 0 :collect) =\<gtr\> #())

    \ \ (check (vec :take-right 3 :collect) =\<gtr\> #(3 4 5))

    \ \ (check (vec :take-right 5 :collect) =\<gtr\> #(1 2 3 4 5))

    \ \ (check (vec :take-right 10 :collect) =\<gtr\> #(1 2 3 4 5))

    )

    \;
  </goldfish-chunk>

  \;

  \;

  <paragraph|case-vector%fold>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%fold initial f)

    \ \ \ \ (vector-fold f initial data))

    \;

    \ \ (define (%fold-right initial f)

    \ \ \ \ (vector-fold-right f initial data))

    \;
  </scm-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let ((vec (case-vector #(1 2 3 4 5))))

    \ \ (check (vec :fold 0 +) =\<gtr\> 15)

    \ \ (check (vec :fold '() (lambda (x acc) (cons x acc))) =\<gtr\> '(5 4 3 2 1))

    \;

    \ \ (check (vec :fold-right 0 +) =\<gtr\> 15)

    \ \ (check (vec :fold-right '() (lambda (x acc) (cons x acc))) =\<gtr\> '(1 2 3 4 5))

    )

    \;
  </goldfish-chunk>

  <subsection|转换器>

  <paragraph|case-vector%to-string>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%to-string)

    \ \ (object-\<gtr\>string data))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (check (object-\<gtr\>string (box #(1 2 3))) =\<gtr\> "#(1 2 3)")

    \;
  </goldfish-chunk>

  <paragraph|case-vector%make-string>

  <\scm-chunk|goldfish/liii/lang.scm|true|true>
    \ \ (define (%make-string . xs)

    \ \ \ \ (define (parse-args xs)

    \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ ((null? xs) (values "" "" ""))

    \ \ \ \ \ \ \ \ ((length=? 1 xs)

    \ \ \ \ \ \ \ \ \ (let1 sep (car xs)

    \ \ \ \ \ \ \ \ \ \ \ (if (string? sep)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (values "" sep "")

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (type-error "case-vector%make-string: separator must be a string" sep))))

    \ \ \ \ \ \ \ \ ((length=? 2 xs)

    \ \ \ \ \ \ \ \ \ (error 'wrong-number-of-args "case-vector%make-string: expected 0, 1, or 3 arguments, but got 2" xs))

    \ \ \ \ \ \ \ \ ((length=? 3 xs)

    \ \ \ \ \ \ \ \ \ (let ((start (car xs))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (sep (cadr xs))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (end (caddr xs)))

    \ \ \ \ \ \ \ \ \ \ \ (if (and (string? start) (string? sep) (string? end))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (values start sep end)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (type-error "case-vector%make-string: prefix, separator, and suffix must be strings" xs))))

    \ \ \ \ \ \ \ \ (else (error 'wrong-number-of-args "case-vector%make-string: expected 0, 1, or 3 arguments" xs))))

    \;

    \ \ \ \ (receive (start sep end) (parse-args xs)

    \ \ \ \ \ \ (string-append start (string-join (map object-\<gtr\>string (vector-\<gtr\>list data)) sep) end)))

    \;
  </scm-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 v (box #(1 2 3))

    \ \ (check (v :count) =\<gtr\> 3)

    \ \ (check (v :count (cut \<gtr\> \<less\>\<gtr\> 1)) =\<gtr\> 2)

    \ \ (check (v :make-string) =\<gtr\> "123")

    \ \ (check (v :make-string " ") =\<gtr\> "1 2 3")

    \ \ (check (v :make-string "[" "," "]") =\<gtr\> "[1,2,3]")

    \ \ 

    \ \ (check-catch 'wrong-number-of-args (v :make-string "[" ","))

    \ \ (check-catch 'type-error (v :make-string 123 "," "]"))

    \ \ (check-catch 'type-error (v :make-string "[" 123 "]"))

    \ \ (check-catch 'type-error (v :make-string "[" "," 123))

    )

    \;
  </goldfish-chunk>

  <section|结尾>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </goldfish-chunk>

  <section|case-hash-table>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define-case-class case-hash-table ((data hash-table?))

    \ \ (define (%collect) data)

    \;
  </goldfish-chunk>

  <paragraph|case-hash-table%map>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%map f . xs)

    \ \ (%apply-one f xs

    \ \ \ \ (let1 r (make-hash-table)

    \ \ \ \ \ \ (hash-table-for-each

    \ \ \ \ \ \ \ \ \ (lambda (k v)

    \ \ \ \ \ \ \ \ \ \ \ (receive (k1 v1) (f k v)

    \ \ \ \ \ \ \ \ \ \ \ \ \ (hash-table-set! r k1 v1)))

    \ \ \ \ \ \ \ \ \ data)

    \ \ \ \ \ \ (case-hash-table r))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 ht (box (hash-table 'a 1 'b 2 'c 3))

    \ \ (let1 r (ht :map (lambda (k v) (values k (+ v 1)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ :collect)

    \ \ \ \ (check (r 'a) =\<gtr\> 2)

    \ \ \ \ (check (r 'b) =\<gtr\> 3)

    \ \ \ \ (check (r 'c) =\<gtr\> 4)))

    \ \ \ \ \ \ 
  </goldfish-chunk>

  <paragraph|case-hash-table%get><typehint|((k any?)) =\<gtr\> option?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%get k)

    \ \ (option (hash-table-ref/default data k '())))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 ht (box (hash-table 'a 1 'b 2 'c 3))

    \ \ (check ((ht :get 'a) :get) =\<gtr\> 1)

    \ \ (check ((ht :get 'd) :empty?) =\<gtr\> #t))

    \;
  </goldfish-chunk>

  <paragraph|case-hash-table%contains><typehint|((k any?)) =\<gtr\> boolean?>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (%contains k)

    \ \ (hash-table-contains? data k))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/lang-test.scm|true|true>
    (let1 ht (box (hash-table 'a 1 'b 2 'c 3))

    \ \ (check-true (ht :contains 'a))

    \ \ (check-false (ht :contains 'd)))

    \;
  </goldfish-chunk>

  <subsection|结尾>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    )

    \;
  </goldfish-chunk>

  <section|常用函数>

  <paragraph|box>

  <\goldfish-chunk|goldfish/liii/lang.scm|true|true>
    (define (box x)

    \ \ (cond ((integer? x) (case-integer x))

    \ \ \ \ \ \ \ \ ((char? x) (case-char (char-\<gtr\>integer x)))

    \ \ \ \ \ \ \ \ ((string? x) (case-string x))

    \ \ \ \ \ \ \ \ ((list? x) (case-list x))

    \ \ \ \ \ \ \ \ ((vector? x) (case-vector x))

    \ \ \ \ \ \ \ \ ((hash-table? x) (case-hash-table x))

    \ \ \ \ \ \ \ \ (else (type-error "box: x must be integer?, char?, string?, list?, vector?, hash-table?"))))

    \;
  </goldfish-chunk>

  <section|结尾>

  <\scm-chunk|goldfish/liii/lang.scm|true|false>
    ) ; end of begin

    ) ; end of library

    \;
  </scm-chunk>

  <\scm-chunk|tests/goldfish/liii/lang-test.scm|true|false>
    (check-report)

    \;
  </scm-chunk>
</body>

<\initial>
  <\collection>
    <associate|font-base-size|12>
    <associate|page-height|auto>
    <associate|page-orientation|landscape>
    <associate|page-screen-margin|false>
    <associate|page-type|a4>
    <associate|page-width|auto>
    <associate|save-aux|false>
  </collection>
</initial>
